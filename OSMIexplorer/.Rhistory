} else {
values_in_use[[colname]] <- as.numeric(replace)
}
replace_condition <- sapply(column_data[[1]], function(i) ifelse(is.na(i), F,str_detect(i,find)))
quantitative[replace_condition,colname] <- replace
}
}
replace <- mean(values_in_use[[colname]])
replace_condition <- ifelse(is.na(quantitative[,colname]),F,T)
quantitative[replace_condition,colname] <- replace
}
replace
quantitative <- df2019 %>%
select(-any_of(types[["Comment"]]))
valuesubs <- -1:10
values_in_use <- list()
for (i in 1:nrow(column_info)) {
colname <- column_info[i,2][[1]]
column_data <- quantitative[colname]
quantitative[colname]<-as.numeric(quantitative[[colname]])
if (is.logical(column_data)) next
for (j in 6:ncol(column_info)-1) {
find <- column_info[i,j][[1]]
if (is.na(find)==F) {
replace <- as.character(as.integer(valuesubs[j-4]))
if (colname %in% names(values_in_use)) {
values_in_use[[colname]] <- unique(c(values_in_use[[colname]],as.numeric(replace)))
} else {
values_in_use[[colname]] <- as.numeric(replace)
}
replace_condition <- sapply(column_data[[1]], function(i) ifelse(is.na(i), F,str_detect(i,find)))
quantitative[replace_condition,colname] <- as.numeric(replace)
}
}
replace <- mean(values_in_use[[colname]])
replace_condition <- ifelse(is.na(quantitative[,colname]),F,T)
quantitative[replace_condition,colname] <- replace
}
View(quantitative)
column_data[is.na(quantitative[colname])]
is.na(quantitative[colname])
quantitative <- df2019 %>%
select(-any_of(types[["Comment"]]))
valuesubs <- -1:10
values_in_use <- list()
for (i in 1:nrow(column_info)) {
colname <- column_info[i,2][[1]]
column_data <- quantitative[colname]
quantitative[colname]<-as.numeric(quantitative[[colname]])
if (is.logical(column_data)) next
for (j in 6:ncol(column_info)-1) {
find <- column_info[i,j][[1]]
if (is.na(find)==F) {
replace <-as.integer(valuesubs[j-4])
if (colname %in% names(values_in_use)) {
values_in_use[[colname]] <- unique(c(values_in_use[[colname]],as.numeric(replace)))
} else {
values_in_use[[colname]] <- as.numeric(replace)
}
replace_condition <- sapply(column_data[[1]], function(i) ifelse(is.na(i), F,str_detect(i,find)))
}
}
replace <- mean(values_in_use[[colname]])
replace_condition <- ifelse(is.na(quantitative[,colname]),F,T)
quantitative[replace_condition,colname] <- replace
quantitative[colname][is.na(quantitative[colname])] <- column_data[is.na(quantitative[colname])]
}
comments <- df2019 %>% select(any_of(types[["Comment"]]))
qualitative <- df2019 %>%
select(-any_of(types[["Comment"]]))%>%
mutate_if(is.logical, as.character)
qualitative[qualitative=="TRUE"] <- "Yes"
qualitative[qualitative=="FALSE"] <- "No"
##quantitative
quantitative <- df2019 %>%
select(-any_of(types[["Comment"]]))
valuesubs <- -1:10
values_in_use <- list()
for (i in 1:nrow(column_info)) {
colname <- column_info[i,2][[1]]
column_data <- quantitative[colname]
quantitative[colname]<-as.numeric(quantitative[[colname]])
if (is.logical(column_data)) next
for (j in 6:ncol(column_info)-1) {
find <- column_info[i,j][[1]]
if (is.na(find)==F) {
replace <-as.integer(valuesubs[j-4])
if (colname %in% names(values_in_use)) {
values_in_use[[colname]] <- unique(c(values_in_use[[colname]],as.numeric(replace)))
} else {
values_in_use[[colname]] <- as.numeric(replace)
}
replace_condition <- sapply(column_data[[1]], function(i) ifelse(is.na(i), F,str_detect(i,find)))
}
}
replace <- mean(values_in_use[[colname]])
replace_condition <- ifelse(is.na(quantitative[,colname]),F,T)
quantitative[replace_condition,colname] <- replace
quantitative[colname][is.na(quantitative[[colname]])] <- column_data[is.na(quantitative[[colname]])]
}
View(quantitative)
View(qualitative)
runApp()
runApp()
library(flexdashboard)
install.packages("fresh")
install.packages("rintrojs")
install.packages("rintrojs")
library(rintrojs)
runApp('~/Test')
install.packages("argonR")
install.packages("argonR")
install.packages("argonDash")
argonDashGallery()
library(argonDash)
argonDashGallery()
library(argonDash)
argonDashGallery()
argonDashGallery()
argonDashGallery()
bs4DashGallery()
library(bs4dash)
install.packages("bs4Dash")
bs4DashGallery()
library(bs4Dash)
bs4DashGallery()
install.packages("echarts4r")
bs4DashGallery()
bs4DashGallery(theme = "old_school")
library(bs4Dash)
bs4DashGallery(theme = "old_school")
bs4DashGallery()
devtools::install_github("MarkEdmondson1234/gentelellaShiny")
library(gentelellaShiny)
options(shiny.jquery.version=1)
library(shiny)
library(gentelellaShiny)
library(shinyWidgets)
shinyApp(
ui = gentelellaPageCustom(
title = "Shiny Gentelella",
navbar = gentelellaNavbar(
navbarItems = notif(
id = "menunotif",
icon = icon("envelope-o"),
status = "primary",
expanded = FALSE,
lapply(X = 1:5, FUN = function(i) {
notifItem(
title = "John Doe",
date = "3 min ago",
img = paste0("https://image.flaticon.com/icons/svg/163/16382", i,".svg"),
"Film festivals used to be do-or-die moments
for movie makers. They were where..."
)
})
)
),
sidebar = gentelellaSidebar(
uiOutput("profile"),
sidebarDate(),
sidebarMenu(
sidebarItem(
"Tab 1",
tabName = "tab1",
icon = tags$i(class = "fas fa-chart-bar"),
badgeName = "new",
badgeStatus = "danger"
),
sidebarItem(
"Tab 2",
tabName = "tab2",
icon = tags$i(class = "fas fa-info")
)
)
),
body = gentelellaBody(
tabItems(
tabItem(
tabName = "tab1",
fluidRow(
column(
width = 4,
align = "center",
sliderInput(
"obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500
)
),
column(
width = 8,
align = "center",
plotOutput("distPlot")
)
)
),
tabItem(
tabName = "tab2",
jumbotron(
title = "Hello, world!",
"This is a simple hero unit, a simple jumbotron-style
component for calling extra attention to featured
content or information."
)
)
)
),
footer = gentelellaFooter()
),
server = function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
counter <- reactiveValues(connect = 0)
observeEvent(counter$connect == 0, {
inputSweetAlert(
session = session,
inputId = "name",
title = "What's your name ?"
)
})
output$profile <- renderUI({
sidebarProfile(
name = input$name,
img = "https://image.flaticon.com/icons/svg/236/236831.svg"
)
})
}
)
devtools::install_github("RinteRface/shinyMetroUi")
?shinyMetroUI
install.packages("shinydashboardPlus")
library(shinydashboardPlus)
shinydashboardPlusGallery()
install.packages("shinyjqui")
shinydashboardPlusGallery()
install.packages("shinyAce")
shinydashboardPlusGallery()
install.packages("styler")
shinydashboardPlusGallery()
install.packages("shinyEffects")
shinydashboardPlusGallery()
argonDashGallery()
install.packages("argonDash")
argonDashGallery()
library(argonDash)
argonDashGallery()
install.packages("argonDash")
if(interactive()){
library(shiny)
library(shinyMetroUi)
shiny::shinyApp(
ui = metroPage(
metroTile(
size = "small",
color = "red",
title = "My tile",
icon = "apps"
),
metroTile(
size = "small",
color = "green",
metroBadge(1, color = "yellow", position = "inline")
),
metroTile(size = "small", color = "blue"),
metroTile(size = "small", color = "orange")
),
server = function(input, output) {}
)
}
if(interactive()){
library(shiny)
library(shinyMetroUi)
shiny::shinyApp(
ui = metroPage(
metroCol(
metroPanel(
title = "Panel title",
width = "250",
collapsible = TRUE,
draggable = TRUE,
"Raptus capios ducunt ad genetrix.
Joy doesn’t beautifully respect any believer —
but the power is what flies",
shadow = 3,
title_color = "red",
icon_color = "green",
collapse_color = "dark",
content_color = "cyan"
)
)
),
server = function(input, output) {}
)
}
if(interactive()){
library(shiny)
library(shinyMetroUi)
shiny::shinyApp(
ui = metroPage(),
server = function(input, output) {}
)
}
if(interactive()){
library(shiny)
library(shinyMetroUi)
shiny::shinyApp(
ui = metroPage(
metroGrid(
metroRow(
xAlign = "center",
yAlign = "center",
metroCell(metroBadge(4, color = "red")),
metroCell(metroBadge(4, color = "yellow")),
metroCell(metroBadge(4, color = "green"))
)
)
),
server = function(input, output) {}
)
}
shinydashboardPlusGallery()
install.packages("shinydashboardPlus")
library(shinydashboardPlus)
shinydashboardPlusGallery()
library(bs4Dash)
bs4DashGallery()
if(interactive()){
library(shiny)
library(tablerDash)
shiny::shinyApp(
ui = tablerDashPage(
navbar = NULL,
footer = NULL,
title = "test",
body = tablerDashBody(
tablerTable(
title = "tablerTable",
tablerTableItem(
left = tablerTag(name = "Tag"),
right = tablerTag(name = "Tag", href = "https://www.google.com")
),
tablerTableItem(right = tablerStatus(color = "red")),
tablerTableItem(
left = tablerAvatarList(
stacked = TRUE,
tablerAvatar(
name = "DG",
size = "xxl"
),
tablerAvatar(
name = "DG",
color = "orange"
),
tablerAvatar(
name = "DG",
status = "warning"
),
tablerAvatar(url = "https://image.flaticon.com/icons/svg/145/145852.svg")
)
)
)
)
),
server = function(input, output) {}
)
}
if(interactive()){
library(shiny)
library(tablerDash)
shiny::shinyApp(
ui = tablerDashPage(
navbar = NULL,
footer = NULL,
title = "test",
body = tablerDashBody(
tablerTable(
title = "tablerTable",
tablerTableItem(
left = tablerTag(name = "Tag"),
right = tablerTag(name = "Tag", href = "https://www.google.com")
),
tablerTableItem(right = tablerStatus(color = "red")),
tablerTableItem(
left = tablerAvatarList(
stacked = TRUE,
tablerAvatar(
name = "DG",
size = "xxl"
),
tablerAvatar(
name = "DG",
color = "orange"
),
tablerAvatar(
name = "DG",
status = "warning"
),
tablerAvatar(url = "https://image.flaticon.com/icons/svg/145/145852.svg")
)
)
)
)
),
server = function(input, output) {}
)
}
install.packages("tablerDash")
if(interactive()){
library(shiny)
library(tablerDash)
shiny::shinyApp(
ui = tablerDashPage(
navbar = NULL,
footer = NULL,
title = "test",
body = tablerDashBody(
tablerTable(
title = "tablerTable",
tablerTableItem(
left = tablerTag(name = "Tag"),
right = tablerTag(name = "Tag", href = "https://www.google.com")
),
tablerTableItem(right = tablerStatus(color = "red")),
tablerTableItem(
left = tablerAvatarList(
stacked = TRUE,
tablerAvatar(
name = "DG",
size = "xxl"
),
tablerAvatar(
name = "DG",
color = "orange"
),
tablerAvatar(
name = "DG",
status = "warning"
),
tablerAvatar(url = "https://image.flaticon.com/icons/svg/145/145852.svg")
)
)
)
)
),
server = function(input, output) {}
)
}
if(interactive()){
library(shiny)
library(tablerDash)
shiny::shinyApp(
ui = tablerDashPage(
navbar = NULL,
footer = NULL,
title = "test",
body = tablerDashBody(
tablerAvatar(
name = "DG",
size = "xxl"
),
tablerAvatar(
name = "DG",
color = "orange"
),
tablerAvatar(
name = "DG",
status = "warning"
),
tablerAvatar(url = "https://image.flaticon.com/icons/svg/145/145852.svg")
)
),
server = function(input, output) {}
)
}
if(interactive()){
library(shiny)
library(tablerDash)
shiny::shinyApp(
ui = tablerDashPage(
navbar = NULL,
footer = NULL,
title = "test",
body = tablerDashBody(
tablerStatCard(
value = 43,
title = "Followers",
trend = -10
)
)
),
server = function(input, output) {}
)
}
install.packages("shinyEffects")
install.packages("shinyEffects")
install.packages("shinyEffects")
library(shinyEffects)
shinyEffectsGallery()
library(shinyEffects)
shinyEffectsGallery()
runApp('~/Test')
##quantitative
quantitative <- df2019 %>%
select(-any_of(types[["Comment"]]))
valuesubs <- -1:10
values_in_use <- list()
source('~/Documents/Data Science Bootcamp/R/ShinyProject/ShinyProjectCode/shinyproject/OSMIexplorer/Functions.R', echo=TRUE)
install.packages("rstan")
